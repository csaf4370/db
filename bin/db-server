#!/usr/bin/env sh

. "${bin}/include/all"

if [ "$#" -gt 1 ]; then shift 2; fi
subcommand="${1}"
server="${2}"
connectiontype="${3}"
ssh="${4}"
host="${5}"
username="${6}"
password="${7}"
database="${8}"

write_config()
{
  _server=$1
  _config="${repository}/${_server}/config"
  _dumps="${repository}/${_server}/dumps"

  _credentials="${_config}/credentials.cnf"
  _db_file="${_config}/database"
  _connectiontype_file="${_config}/connectiontype"
  _ssh_config="${_config}/ssh.cnf"

  if [ ! -d "${_config}" ]; then
    mkdir -p "${_config}"
  fi

  if [ ! -d "${_dumps}" ]; then
    mkdir -p "${_dumps}"
  fi

  dbtype=$(cat "${repository}/type") 

  if [ "${dbtype}" = "postgresql" ]; then
	  echo "${username}:${password}@${host}:${port}/${database}" > "${_credentials}"
  else
	  echo "[client]" > "${_credentials}"
	  echo "user = ${username}" >> "${_credentials}"
	  echo "password = ${password}" >> "${_credentials}"
	  echo "host = ${host}" >> "${_credentials}"
  fi

  chmod 600 "${_credentials}"

  echo "${database}" > "${_db_file}"
  chmod 600 "${_db_file}"

  echo "${connectiontype}" > "${_connectiontype_file}"

  if [ -f "${_ssh_config}" ]; then
    rm "${_ssh_config}"
  fi

  case $connectiontype in
    direct)
      ;;

    ssh)
      echo "${ssh}" > "${_ssh_config}"
      chmod 600 "${_ssh_config}"
      ;;
  esac
}

test_config()
{
  _server=$1

  "${bin}/../db" test "$_server" >/dev/null 2>&1
}

delete_config()
{
  _server=$(basename "$1")
  if [ -d "${repository}/${_server:?}" ]; then
    rm -rf "${repository}/${_server:?}"
  fi
}

add_server()
{
  while true; do
    if [ "$#" -ne 7 ]; then

      echo ""
      echo "${COLOR_LIGHT_BLUE}Please provide the connection details for the database${COLOR_NC}"
      user_input "Server alias" "Please provide a meaningful server name to refer to this database, such as 'localhost', 'development', 'staging', ..." "${server}" 0
      server=${answer}

      user_input "Connection type, e.g. direct, or ssh" "Please specify how you connect to this database" "${connectiontype}" 0
      connectiontype=${answer}

      case ${connectiontype} in
        direct)
          ;;

        ssh)
          user_input "SSH login, e.g. user@hostname.com" "Please provide the username and host of the remote server" "${ssh}" 0
          ssh=${answer}
          ;;
      esac
      
      echo "Please provide the database host. For connection types SSH and direct, this is probably 127.0.0.1".
      user_input "Database host" "Please provide a database hostname" "127.0.0.1" 0
      host=${answer}

      user_input "Username" "Please provide a username" "root" 0
      username=${answer}

      user_input "Password" "Please provide the password for user '${username}'" "" 1
      password=${answer}

      user_input "Database" "Please provide the name of a database" "" 0
      database=${answer}
    else
      # remove host, user, password etc from command line arguments
      shift 6
    fi

    ts=$(date +%Y%m%d-%H%M%S)
    test="test-${ts}"
    write_config "${test}"
    test_config "${test}"
    code="${?}"
    # delete_config "${test}"

    if [ "${code}" -eq 127 ]; then
      echo "${COLOR_RED}Could not find mysql binary.${COLOR_NC}"
    else
        if [ "${code}" -eq 1 ]; then
          echo "${COLOR_RED}Could not connect to database. Please try again.${COLOR_NC}"
          continue
        else
          echo "${COLOR_GREEN}Successfully connected to database. Writing config.${COLOR_NC}"
        fi
    fi

    write_config "${server}"
    exit 0
  done
}

rm_server()
{
  _server=$1
  if [ -d "${repository}/${_server}/config" ]; then
    delete_config "$_server"
    echo "${COLOR_GREEN}Succesfully removed server configuration \"${_server}\".${COLOR_NC}"
  else
    echo "${COLOR_RED}Server configuration \"${_server}\" does not exist.${COLOR_NC}"
  fi
}

list_servers()
{
  find "${repository}" -mindepth 1 -maxdepth 1 -type d | rev | cut -d '/' -f 1 | rev
}

if [ "${subcommand}" != "add" ] && [ "${subcommand}" != "rm" ] && [ "${subcommand}" != "list" ]; then
  echo "USAGE:"
  echo ""
  echo "  ${COLOR_LIGHT_BLUE}db server add (server alias) (ssh) (hostname) (username) (password) (database)${COLOR_NC}"
  echo ""
  echo "      Adds a server to the repository. All parameters are optional."
  echo ""
  echo "  ${COLOR_LIGHT_BLUE}db server rm [server alias]${COLOR_NC}"
  echo ""
  echo "      Removes a server and all its snapshots from the repository."
  echo ""
  echo "  ${COLOR_LIGHT_BLUE}db server list${COLOR_NC}"
  echo ""
  echo "      Shows a list of available servers."
  echo ""
fi

case ${subcommand} in
  add)
    add_server
    exit 0
    ;;

  rm)
    rm_server "${server}"
    exit 0
    ;;

  list)
    list_servers
    exit 0
    ;;
esac
